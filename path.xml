<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="1" skipped="0" tests="23" time="46.104" timestamp="2022-04-13T13:26:55.584608" hostname="MSDT120"><testcase classname="Tests.test_LoginPage.Test_Login" name="test_verify_login_page_title[chrome]" time="3.119" /><testcase classname="Tests.test_LoginPage.Test_Login" name="test_verify_login_into_app[chrome]" time="1.028" /><testcase classname="Tests.test_LoginPage.Test_Login" name="test_verify_login_into_app_with_incorrect_credentials[chrome]" time="0.688" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_home_page_title[chrome]" time="3.427" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_home_page_header[chrome]" time="0.987" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_cart_icon_visible[chrome]" time="0.637" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_product_sort_container[chrome]" time="0.876" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_shopping[chrome]" time="0.777" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_sorting_L_to_H[chrome]" time="0.692" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_sorting_H_to_L[chrome]" time="0.626" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_sorting_Z_To_A[chrome]" time="0.692" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_sorting_A_To_Z[chrome]" time="0.717" /><testcase classname="Tests.test_HomePage.Test_Home" name="test_verify_logout_into_app[chrome]" time="1.410" /><testcase classname="Tests.test_AddToCartPage.Test_AddTOCartPage" name="test_verify_cart_page_header[chrome]" time="3.881" /><testcase classname="Tests.test_AddToCartPage.Test_AddTOCartPage" name="test_verify_item_in_cart[chrome]" time="6.091"><failure message="selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {&quot;method&quot;:&quot;xpath&quot;,&quot;selector&quot;:&quot;//*[text()='Sauce Labs Backpack']&quot;}&#10;  (Session info: chrome=100.0.4896.88)">self = &lt;Tests.test_AddToCartPage.Test_AddTOCartPage object at 0x0000025E5FB6F340&gt;

    @pytest.mark.order(15)
    def test_verify_item_in_cart(self):
        self.loginPage = LoginPage(self.driver)
        homePage = self.loginPage.do_login()
        homePage.do_shopping()
        addToCart = AddToCartPage(self.driver)
&gt;       addToCart.is_items_exist_in_cart()

Tests\test_AddToCartPage.py:35: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
Pages\AddToCartPage.py:20: in is_items_exist_in_cart
    searchProductPresence  = self.driver.find_element_by_xpath(
..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:394: in find_element_by_xpath
    return self.find_element(by=By.XPATH, value=xpath)
..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:976: in find_element
    return self.execute(Command.FIND_ELEMENT, {
..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\webdriver.py:321: in execute
    self.error_handler.check_response(response)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000025E5FD01C30&gt;
response = {'status': 404, 'value': '{"value":{"error":"no such element","message":"no such element: Unable to locate element: {\...\n\\tRtlGetAppContainerNamedObjectPath [0x77E37A7E+286]\\n\\tRtlGetAppContainerNamedObjectPath [0x77E37A4E+238]\\n"}}'}

    def check_response(self, response):
        """
        Checks that a JSON response from the WebDriver does not have an error.
    
        :Args:
         - response - The JSON response from the WebDriver server as a dictionary
           object.
    
        :Raises: If the response contains an error message.
        """
        status = response.get('status', None)
        if status is None or status == ErrorCode.SUCCESS:
            return
        value = None
        message = response.get("message", "")
        screen = response.get("screen", "")
        stacktrace = None
        if isinstance(status, int):
            value_json = response.get('value', None)
            if value_json and isinstance(value_json, basestring):
                import json
                try:
                    value = json.loads(value_json)
                    if len(value.keys()) == 1:
                        value = value['value']
                    status = value.get('error', None)
                    if status is None:
                        status = value["status"]
                        message = value["value"]
                        if not isinstance(message, basestring):
                            value = message
                            message = message.get('message')
                    else:
                        message = value.get('message', None)
                except ValueError:
                    pass
    
        exception_class = ErrorInResponseException
        if status in ErrorCode.NO_SUCH_ELEMENT:
            exception_class = NoSuchElementException
        elif status in ErrorCode.NO_SUCH_FRAME:
            exception_class = NoSuchFrameException
        elif status in ErrorCode.NO_SUCH_WINDOW:
            exception_class = NoSuchWindowException
        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:
            exception_class = StaleElementReferenceException
        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:
            exception_class = ElementNotVisibleException
        elif status in ErrorCode.INVALID_ELEMENT_STATE:
            exception_class = InvalidElementStateException
        elif status in ErrorCode.INVALID_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR \
                or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER:
            exception_class = InvalidSelectorException
        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:
            exception_class = ElementNotSelectableException
        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:
            exception_class = ElementNotInteractableException
        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:
            exception_class = InvalidCookieDomainException
        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:
            exception_class = UnableToSetCookieException
        elif status in ErrorCode.TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.SCRIPT_TIMEOUT:
            exception_class = TimeoutException
        elif status in ErrorCode.UNKNOWN_ERROR:
            exception_class = WebDriverException
        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:
            exception_class = UnexpectedAlertPresentException
        elif status in ErrorCode.NO_ALERT_OPEN:
            exception_class = NoAlertPresentException
        elif status in ErrorCode.IME_NOT_AVAILABLE:
            exception_class = ImeNotAvailableException
        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:
            exception_class = ImeActivationFailedException
        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:
            exception_class = MoveTargetOutOfBoundsException
        elif status in ErrorCode.JAVASCRIPT_ERROR:
            exception_class = JavascriptException
        elif status in ErrorCode.SESSION_NOT_CREATED:
            exception_class = SessionNotCreatedException
        elif status in ErrorCode.INVALID_ARGUMENT:
            exception_class = InvalidArgumentException
        elif status in ErrorCode.NO_SUCH_COOKIE:
            exception_class = NoSuchCookieException
        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:
            exception_class = ScreenshotException
        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:
            exception_class = ElementClickInterceptedException
        elif status in ErrorCode.INSECURE_CERTIFICATE:
            exception_class = InsecureCertificateException
        elif status in ErrorCode.INVALID_COORDINATES:
            exception_class = InvalidCoordinatesException
        elif status in ErrorCode.INVALID_SESSION_ID:
            exception_class = InvalidSessionIdException
        elif status in ErrorCode.UNKNOWN_METHOD:
            exception_class = UnknownMethodException
        else:
            exception_class = WebDriverException
        if value == '' or value is None:
            value = response['value']
        if isinstance(value, basestring):
            if exception_class == ErrorInResponseException:
                raise exception_class(response, value)
            raise exception_class(value)
        if message == "" and 'message' in value:
            message = value['message']
    
        screen = None
        if 'screen' in value:
            screen = value['screen']
    
        stacktrace = None
        if 'stackTrace' in value and value['stackTrace']:
            stacktrace = []
            try:
                for frame in value['stackTrace']:
                    line = self._value_or_default(frame, 'lineNumber', '')
                    file = self._value_or_default(frame, 'fileName', '&lt;anonymous&gt;')
                    if line:
                        file = "%s:%s" % (file, line)
                    meth = self._value_or_default(frame, 'methodName', '&lt;anonymous&gt;')
                    if 'className' in frame:
                        meth = "%s.%s" % (frame['className'], meth)
                    msg = "    at %s (%s)"
                    msg = msg % (meth, file)
                    stacktrace.append(msg)
            except TypeError:
                pass
        if exception_class == ErrorInResponseException:
            raise exception_class(response, message)
        elif exception_class == UnexpectedAlertPresentException:
            alert_text = None
            if 'data' in value:
                alert_text = value['data'].get('text')
            elif 'alert' in value:
                alert_text = value['alert'].get('text')
            raise exception_class(message, screen, stacktrace, alert_text)
&gt;       raise exception_class(message, screen, stacktrace)
E       selenium.common.exceptions.NoSuchElementException: Message: no such element: Unable to locate element: {"method":"xpath","selector":"//*[text()='Sauce Labs Backpack']"}
E         (Session info: chrome=100.0.4896.88)

..\..\AppData\Local\Programs\Python\Python310\lib\site-packages\selenium\webdriver\remote\errorhandler.py:242: NoSuchElementException</failure></testcase><testcase classname="Tests.test_CheckoutYourInfoPage.Test_CheckoutYourInfoPage" name="test_verify_CheckoutYourInfo_page_header[chrome]" time="4.111" /><testcase classname="Tests.test_CheckoutYourInfoPage.Test_CheckoutYourInfoPage" name="test_verify_enter_info_in_form[chrome]" time="1.039" /><testcase classname="Tests.test_CheckoutYourInfoPage.Test_CheckoutYourInfoPage" name="test_verify_continue_button[chrome]" time="1.385" /><testcase classname="Tests.test_CheckoutOverviewPage.Test_CheckoutOverviewPage" name="test_verify_added_items_getting_displayed[chrome]" time="4.601" /><testcase classname="Tests.test_CheckoutOverviewPage.Test_CheckoutOverviewPage" name="test_verify_checkout_overview_page_header[chrome]" time="1.507" /><testcase classname="Tests.test_CheckoutCompletePage.Test_CheckoutCompletePage" name="test_verify_checkout_complete_page_header[chrome]" time="4.561" /><testcase classname="Tests.test_CheckoutCompletePage.Test_CheckoutCompletePage" name="test_verify_checkout_complete_page_message[chrome]" time="1.205" /><testcase classname="Tests.test_CheckoutCompletePage.Test_CheckoutCompletePage" name="test_verify_checkout_complete_page_back_home_button[chrome]" time="1.567" /></testsuite></testsuites>